//დაწერეთ ფუნქცია რომელიც პარამეტრად მიიღებს მთელი რიცხვების მასივს და დააბრუნებს რამდენი განსხვავებული ელემენტია მასში.(სორტირების გამოყენების გარეშე)

func unique(array: [Int]) -> Int?{
    if array.isEmpty{
        return nil
    }
    
    var set = Set<Int>()
    
    for i in array{
        set.insert(i)
    }
    
    return set.count
}

var array = [1,2,1,1,1,1,1,1]
unique(array: array)


//დაწერეთ ფუნქცია რომელიც პარამეტრად მიიღებს ორი მთელი რიცხვების მასივს და დააბრუნებს მათ თანაკვეთას

func intersection(array1: [Int],array2: [Int]) -> [Int]?{
    if array1.isEmpty || array2.isEmpty{
        return nil
    }
    
    var i = 0
    var j = 0
    
    var array = [Int]()
    
    while(i < array1.count && j < array2.count){
        if array1[i] < array2[j]{
            i += 1
        } else if array1[i] > array2[j]{
            j += 1
        } else {
            array.append(array1[i])
            i += 1
            j += 1
        }
    }
    return array
}

var a1 = [ 4, 9 , 11, -4, 7, -11, 7 ]
var a2 = [ 89, 33, 7, 1, -11, 14, 98, 7]
intersection(array1: a1.sorted(), array2: a2.sorted())

//დაწერეთ ფუნქცია რომელიც პარამეტრად მიიღებს ორი მთელი რიცხვების მასივს და დააბრუნებს მათ გაერთიანებას
func association(array1:[Int], array2: [Int]) -> [Int]?{
    if array1.isEmpty || array2.isEmpty{
        return nil
    }
    
    var array = [Int]()

    var i = 0
    var j = 0
    
    while(i < array1.count && j < array2.count){
        if array1[i] < array2[j]{
            array.append(array1[i])
            i += 1
        }
        else if array1[i] > array2[i]{
            array.append(array2[j])
            j += 1
        }
        else{
            array.append(array1[i])
            i += 1
            j += 1
        }
    }
    return array
}

association(array1: a1.sorted(), array2: a2.sorted())
